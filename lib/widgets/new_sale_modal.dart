import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:kantemba_finances/models/inventory_item.dart';
import 'package:kantemba_finances/models/sale.dart';
import 'package:kantemba_finances/providers/inventory_provider.dart';
import 'package:kantemba_finances/providers/sales_provider.dart';
import 'package:kantemba_finances/providers/users_provider.dart';

class NewSaleModal extends StatefulWidget {
  const NewSaleModal({super.key});

  @override
  State<NewSaleModal> createState() => _NewSaleModalState();
}

class _NewSaleModalState extends State<NewSaleModal> {
  final List<SaleItem> _cartItems = [];
  double _grandTotal = 0.0;

  final bool isVatRegistered = true;
  final bool isTurnoverTaxApplicable = false;
  final bool isMobileMoneyPayment = true;

  static const double vatRate = 0.16;
  static const double turnoverTaxRate = 0.05;
  static const double mobileMoneyLevy = 0.05;

  void _addProductToCart(InventoryItem product) {
    setState(() {
      final existingItemIndex = _cartItems.indexWhere(
        (item) => item.product.name == product.name,
      );

      if (existingItemIndex != -1) {
        _cartItems[existingItemIndex].quantity++;
      } else {
        _cartItems.add(SaleItem(product: product, quantity: 1));
      }
      _calculateTotal();
    });
  }

  void _calculateTotal() {
    _grandTotal = 0.0;
    for (var item in _cartItems) {
      _grandTotal += item.product.price * item.quantity;
    }
  }

  Map<String, double> _calculateTaxes(double total) {
    double vat = 0.0;
    double turnoverTax = 0.0;
    double levy = 0.0;

    if (isVatRegistered) {
      vat = total * vatRate;
    } else if (isTurnoverTaxApplicable) {
      turnoverTax = total * turnoverTaxRate;
    }
    if (isMobileMoneyPayment) {
      levy = mobileMoneyLevy;
    }
    return {'vat': vat, 'turnoverTax': turnoverTax, 'levy': levy};
  }

  void _addSale() {
    if (_cartItems.isEmpty) return;

    final currentUser =
        Provider.of<UsersProvider>(context, listen: false).currentUser;
    if (currentUser == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('No user is logged in!')));
      return;
    }

    final taxes = _calculateTaxes(_grandTotal);
    final grandTotal =
        _grandTotal + taxes['vat']! + taxes['turnoverTax']! + taxes['levy']!;

    final newSale = Sale(
      id: '', // ID will be generated by provider
      items: _cartItems,
      totalAmount: _grandTotal,
      grandTotal: grandTotal,
      vat: taxes['vat']!,
      turnoverTax: taxes['turnoverTax']!,
      levy: taxes['levy']!,
      date: DateTime.now(),
      createdBy: '', // Will be set by provider
    );

    Provider.of<SalesProvider>(
      context,
      listen: false,
    ).addSale(newSale, currentUser.id);

    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    // This UI is largely the same as the old new_sale_screen
    // A simplified version is shown here for brevity
    final availableProducts =
        Provider.of<InventoryProvider>(context).items
            .map(
              (item) => InventoryItem(
                id: item.id,
                name: item.name,
                price: item.price,
                quantity: item.quantity,
                createdBy: item.createdBy,
              ),
            )
            .toList();

    return SingleChildScrollView(
      child: Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: Container(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'New Sale',
                style: Theme.of(context).textTheme.headlineSmall,
              ),
              SizedBox(
                height: 200,
                child: ListView.builder(
                  itemCount: availableProducts.length,
                  itemBuilder:
                      (ctx, i) => ListTile(
                        title: Text(availableProducts[i].name),
                        trailing: IconButton(
                          icon: const Icon(Icons.add),
                          onPressed:
                              () => _addProductToCart(availableProducts[i]),
                        ),
                      ),
                ),
              ),
              const Divider(),
              ElevatedButton(
                onPressed: _addSale,
                child: const Text('Add Sale'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
