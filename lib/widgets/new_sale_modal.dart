import 'package:flutter/material.dart';
import 'package:kantemba_finances/providers/business_provider.dart';
import 'package:provider/provider.dart';
import 'package:kantemba_finances/models/inventory_item.dart';
import 'package:kantemba_finances/models/sale.dart';
import 'package:kantemba_finances/providers/inventory_provider.dart';
import 'package:kantemba_finances/providers/sales_provider.dart';
import 'package:kantemba_finances/providers/users_provider.dart';

class NewSaleModal extends StatefulWidget {
  const NewSaleModal({super.key});

  @override
  State<NewSaleModal> createState() => _NewSaleModalState();
}

class _NewSaleModalState extends State<NewSaleModal> {
  final List<SaleItem> _cartItems = [];
  final TextEditingController _searchController = TextEditingController();
  double _grandTotal = 0.0;
  String _searchQuery = '';
  bool _isProcessing = false;

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  void _addProductToCart(InventoryItem product) {
    if (product.quantity <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Product is out of stock'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      final existingItemIndex = _cartItems.indexWhere(
        (item) => item.product.id == product.id,
      );

      if (existingItemIndex != -1) {
        final currentCartQuantity = _cartItems[existingItemIndex].quantity;
        if (currentCartQuantity >= product.quantity) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Insufficient stock available'),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }
        _cartItems[existingItemIndex].quantity++;
      } else {
        _cartItems.add(SaleItem(product: product, quantity: 1));
      }
      _calculateTotal();
    });
  }

  void _removeProductFromCart(String productId) {
    setState(() {
      _cartItems.removeWhere((item) => item.product.id == productId);
      _calculateTotal();
    });
  }

  void _updateQuantity(String productId, int newQuantity) {
    final item = _cartItems.firstWhere(
      (item) => item.product.id == productId,
      orElse: () => throw StateError('Item not found'),
    );

    if (newQuantity > item.product.quantity) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'Cannot exceed available stock (${item.product.quantity})',
          ),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      final index = _cartItems.indexWhere(
        (item) => item.product.id == productId,
      );
      if (index != -1) {
        if (newQuantity > 0) {
          _cartItems[index].quantity = newQuantity;
        } else {
          _cartItems.removeAt(index);
        }
        _calculateTotal();
      }
    });
  }

  void _clearCart() {
    setState(() {
      _cartItems.clear();
      _calculateTotal();
    });
  }

  void _calculateTotal() {
    _grandTotal = 0.0;
    for (var item in _cartItems) {
      _grandTotal += item.product.price * item.quantity;
    }
  }

  Future<void> _addSale() async {
    if (_cartItems.isEmpty) return;

    final currentUser =
        Provider.of<UsersProvider>(context, listen: false).currentUser;
    final businessProvider = Provider.of<BusinessProvider>(
      context,
      listen: false,
    );
    if (currentUser == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('No user is logged in!')));
      return;
    }

    setState(() {
      _isProcessing = true;
    });

    try {
      final newSale = Sale(
        id: '', // ID will be generated by provider
        items: List<SaleItem>.from(_cartItems),
        totalAmount: _grandTotal,
        grandTotal: _grandTotal,
        vat: 0.0,
        turnoverTax: 0.0,
        levy: 0.0,
        date: DateTime.now(),
        createdBy: '', // Will be set by provider
      );

      Provider.of<SalesProvider>(
        context,
        listen: false,
      ).addSale(newSale, businessProvider.id!, currentUser.id);

      for (var item in _cartItems) {
        Provider.of<InventoryProvider>(
          context,
          listen: false,
        ).saleStock(item.product.id, item.quantity);
      }

      if (mounted) {
        Navigator.of(context).pop();
      }
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Failed to add sale: $e')));
    } finally {
      if (mounted) {
        setState(() {
          _isProcessing = false;
        });
      }
    }
  }

  List<InventoryItem> _getFilteredProducts() {
    final availableProducts =
        Provider.of<InventoryProvider>(
          context,
        ).items.where((product) => product.quantity > 0).toList();

    if (_searchQuery.isEmpty) {
      return availableProducts;
    }

    return availableProducts.where((product) {
      return product.name.toLowerCase().contains(_searchQuery.toLowerCase());
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final filteredProducts = _getFilteredProducts();

    return SingleChildScrollView(
      child: Padding(
        padding: EdgeInsets.only(
          bottom: MediaQuery.of(context).viewInsets.bottom,
        ),
        child: Container(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'New Sale',
                style: Theme.of(context).textTheme.headlineSmall,
              ),
              const SizedBox(height: 12),
              // Search bar
              TextField(
                controller: _searchController,
                decoration: const InputDecoration(
                  labelText: 'Search product',
                  prefixIcon: Icon(Icons.search),
                  border: OutlineInputBorder(),
                ),
                onChanged: (value) {
                  setState(() {
                    _searchQuery = value;
                  });
                },
              ),
              const SizedBox(height: 12),
              // Product list
              SizedBox(
                height: 180,
                child:
                    filteredProducts.isEmpty
                        ? const Center(child: Text('No products found'))
                        : ListView.builder(
                          itemCount: filteredProducts.length,
                          itemBuilder: (ctx, i) {
                            final product = filteredProducts[i];
                            return ListTile(
                              title: Text(product.name),
                              subtitle: Text(
                                'Price: ${product.price.toStringAsFixed(2)} | Stock: ${product.quantity}',
                              ),
                              trailing: IconButton(
                                icon: const Icon(Icons.add),
                                onPressed: () => _addProductToCart(product),
                              ),
                            );
                          },
                        ),
              ),
              const Divider(),
              // Cart items
              if (_cartItems.isNotEmpty) ...[
                const SizedBox(height: 8),
                Text('Cart', style: Theme.of(context).textTheme.titleMedium),
                SizedBox(
                  height: 150,
                  child: ListView.builder(
                    itemCount: _cartItems.length,
                    itemBuilder: (ctx, i) {
                      final cartItem = _cartItems[i];
                      return ListTile(
                        title: Text(cartItem.product.name),
                        subtitle: Text(
                          'Unit: ${cartItem.product.price.toStringAsFixed(2)} | Qty: ${cartItem.quantity} | Total: ${(cartItem.product.price * cartItem.quantity).toStringAsFixed(2)}',
                        ),
                        leading: IconButton(
                          icon: const Icon(Icons.remove_circle_outline),
                          onPressed:
                              () => _removeProductFromCart(cartItem.product.id),
                        ),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: const Icon(Icons.remove),
                              onPressed: () {
                                if (cartItem.quantity > 1) {
                                  _updateQuantity(
                                    cartItem.product.id,
                                    cartItem.quantity - 1,
                                  );
                                }
                              },
                            ),
                            Text('${cartItem.quantity}'),
                            IconButton(
                              icon: const Icon(Icons.add),
                              onPressed: () {
                                _updateQuantity(
                                  cartItem.product.id,
                                  cartItem.quantity + 1,
                                );
                              },
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Total:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    Text(
                      _grandTotal.toStringAsFixed(2),
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton.icon(
                      icon: const Icon(Icons.clear),
                      label: const Text('Clear Cart'),
                      onPressed: _clearCart,
                    ),
                  ],
                ),
              ],
              const SizedBox(height: 12),
              // Add Sale button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed:
                      _isProcessing || _cartItems.isEmpty ? null : _addSale,
                  child:
                      _isProcessing
                          ? const SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                          : const Text('Add Sale'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
